{
    "swagger": "2.0",
    "info": {
      "description": " Teamwork is an internal social network for organizations employees. The goal of this application is to facilitate more interaction between colleagues and facilitate team bonding ",
      "version": "1.0.3",
      "title": "Teamwork social Network",
      "contact": {
        "email": "clementmistico@gmail.com"
      }
    },
    "host": "localhost:5000",
    "basePath": "/api/v1",
    "tags": [
      {
        "name": "user",
        "description": "Operations related to user"
      },
      {
        "name": "Articles",
        "description": "Operations about articles"
      }
    ],
    "schemes": [
      "http",
      "https"
    ],
    "paths": {
      "/store/order/{orderId}": {
        "get": {
          "tags": [
            "Articles"
          ],
          "summary": "Find purchase order by ID",
          "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "operationId": "getOrderById",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "ID of pet that needs to be fetched",
              "required": true,
              "type": "integer",
              "maximum": 10,
              "minimum": 1
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Order"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          }
        },
        "delete": {
          "tags": [
            "Articles"
          ],
          "summary": "Delete purchase order by ID",
          "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId": "deleteOrder",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "ID of the order that needs to be deleted",
              "required": true,
              "type": "integer",
              "minimum": 1,
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          }
        }
      },
      "/store/order": {
        "post": {
          "tags": [
            "Articles"
          ],
          "summary": "Place an order for a pet",
          "description": "",
          "operationId": "placeOrder",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "order placed for purchasing the pet",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Order"
              }
            },
            "400": {
              "description": "Invalid Order"
            }
          }
        }
      },
      "/auth/signup": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Signup page",
          "description": "Provide proper information to get registered",
          "operationId": "registerUser",
          "consumes": "application/json",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "description": " Enter Full information like provided example ",
              "required": true,
              "type": "string",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }],
          
          "responses": {
            "201": {
              "description": "user created successful ",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "Operation failed"
            }
          }
        }
        
      },
      "/auth/users": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Get all users",
          "operationId": "getAllUsers",
          "produces": "application/json",
          "parameters": [{
            "name": "auth",
            "in": "header",
            "required":true,
            "type":"string"
          }],
          "responses": {
            "200": {
              "description": "All users retrieved successful"
                            
            },
            "400": {
              "description": "Operation failed"
            }

          }
        }
      },
      "/auth/signin": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Logs user into the system",
          "description": "",
          "operationId": "loginUser",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "description": "user information please",
              "required": true,
              "type": "string",
              "schema": {
                "$ref": "#/definitions/loginInfo"
              }

            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "headers": {
                "X-Expires-After": {
                  "type": "string",
                  "format": "date-time",
                  "description": "date in UTC when token expires"
                },
                "X-Rate-Limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "calls per hour allowed by the user"
                }
              }
            },
            "400": {
              "description": "Invalid username/password supplied"
            }
          }
        }
      },
      "/user/logout": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Logs out current logged in user session",
          "description": "",
          "operationId": "logoutUser",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "parameters": [],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      }
    },
    "securityDefinitions": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "petstore_auth": {
        "type": "oauth2",
        "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
        "flow": "implicit",
        "scopes": {
          "read:pets": "read your pets",
          "write:pets": "modify pets in your account"
        }
      }
    },
    "definitions": {
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Pet": {
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/definitions/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "tag"
              },
              "$ref": "#/definitions/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "loginInfo": {
        "type": "object",
        "properties": {
          "email":{
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "jobRole": {
            "type": "string"
          },
          "departement": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      }
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    }
  }